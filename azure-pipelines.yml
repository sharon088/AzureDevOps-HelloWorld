trigger:
- main
- develop

pool:
  name: Default

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  project: '**/*.csproj'
  Major: '1'
  Minor: '0'
  Patch: $(Build.BuildId)  # Automatically increments with each build
  buildVersion: "$(Major).$(Minor).$(Patch)-$(Build.SourceBranchName)"  
  SENDGRID_API_KEY: $(sendgridApiKey)
  System.Debug: true

stages:
  - stage: CleanAndInstall
    jobs:
      - job: CleanAndInstallDependencies
        displayName: 'Clean and Install Dependencies'
        steps:
          - checkout: self
            fetchDepth: 0
            
          # Install .NET SDK
          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '8.x'  
              installationPath: $(Agent.ToolsDirectory)/dot

          # Install Node.js
          - task: UseNode@1
            inputs:
              version: '23.x'

          # Install NuGet Tool
          - task: NuGetToolInstaller@1
            displayName: 'Install NuGet Tool'

          # NuGet Authenticate
          - task: NuGetAuthenticate@1
            displayName: 'NuGet Authenticate'

  - stage: BuildAndAnalyze
    dependsOn: CleanAndInstall
    jobs:
      - job: BuildAndAnalyzeProject
        displayName: 'Build and Analyze Project'
        steps:
          # Restore dependencies
          - task: DotNetCoreCLI@2
            inputs:
              command: 'restore'
              projects: '$(project)'
            displayName: 'Restore dependencies'

          # Build project
          - task: DotNetCoreCLI@2
            inputs:
              command: 'build'
              projects: '$(project)'
              arguments: '--configuration $(buildConfiguration)'
            displayName: 'Build project'

          # SonarQube Analysis (only for develop branch)
          - task: SonarQubePrepare@6
            condition: eq(variables['Build.SourceBranchName'], 'develop')
            inputs:
              SonarQube: 'SonarQubeForSonarCloud'
              scannerMode: 'MSBuild'
              organization: 'sharonsonarcloud'
              projectKey: 'sharon088_FirstHelloWorld'
              projectName: 'FirstHelloWorld'

          # SonarQube Analyze (only for develop branch)
          - task: SonarQubeAnalyze@6
            condition: eq(variables['Build.SourceBranchName'], 'develop')
            inputs:
              jdkversion: 'JAVA_HOME_21_X64'

  - stage: Publish
    dependsOn: BuildAndAnalyze
    jobs:
      - job: PackAndPublish
        displayName: 'Pack and Publish'
        steps:
          # Pack the project
          - task: DotNetCoreCLI@2
            inputs:
              command: 'pack'
              projects: '$(project)'
              versioningScheme: 'byEnvVar' 
              versionEnvVar: 'buildVersion'
            displayName: 'Pack project with version $(buildVersion)'

          # Push package to Azure Artifacts
          - task: DotNetCoreCLI@2
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: 'cde17caf-1198-4a60-90b3-0703b5263860/834a9e3c-e662-4c26-8a33-a54324b7196b'

          # Print Version to Console
          - script: |
              echo "Version: $(buildVersion)"
            displayName: 'Print Version to Console'

  - stage: Notify
    dependsOn: Publish
    jobs:
      - job: SendNotifications
        displayName: 'Send Notifications'
        steps:
          # Success Email
          - task: SendGridEmail@2
            condition: succeeded()
            inputs:
              SendGridApiKey: '$(SENDGRID_API_KEY)'
              FromAddress: 'sharon088@gmail.com'
              ToAddresses: 'rotem23592@gmail.com'
              Subject: 'Pipeline Success - Azure DevOps Build'
              emailBodyFormat: 'InLine'
              EmailBody: |
                Pipeline has completed successfully.
                
                Build Number: $(Build.BuildNumber)
                Build ID: $(Build.BuildId)
                
                ## Additional Information
                - Source Branch: $(Build.SourceBranchName)
                - Project: $(project)

          # Failure Email
          - task: SendGridEmail@2
            condition: failed()
            inputs:
              SendGridApiKey: '$(SENDGRID_API_KEY)'
              FromAddress: 'sharon088@gmail.com'
              ToAddresses: 'rotem23592@gmail.com'
              Subject: 'Pipeline Failed - Azure DevOps Build'
              emailBodyFormat: 'InLine'
              EmailBody: |
                Pipeline has failed. Please check the logs for details.
                
                Build Number: $(Build.BuildNumber)
                Build ID: $(Build.BuildId)
                
                ## Additional Information
                - Source Branch: $(Build.SourceBranchName)
                - Project: $(project)

          
