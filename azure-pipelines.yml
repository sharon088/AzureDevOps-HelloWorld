
trigger:
- main

pool:
  name: Default

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  project: '**/*.csproj'
  Major: '1'
  Minor: '0'
  Patch: $(Build.BuildId)  # Automatically increments with each build
  buildVersion: "$(Major).$(Minor).$(Patch)-$(Build.SourceBranchName)"  
  SENDGRID_API_KEY: $(sendgridApiKey)

steps:
  - checkout: self
    fetchDepth: 0
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.x'  
      installationPath: $(Agent.ToolsDirectory)/dot

  - task: UseNode@1
    inputs:
      version: '23.x'
  - task: SonarQubePrepare@6
    condition: eq(variables['Build.SourceBranchName'], 'develop')
    inputs:
      SonarQube: 'SonarQubeForSonarCloud'  # name of the service connection created in Azure DevOps
      scannerMode: 'MSBuild'
      organization: 'sharonsonarcloud'
      projectKey: 'sharon088_FirstHelloWorld'  # Exact key from SonarCloud 
      projectName: 'FirstHelloWorld'  # Project name in SonarQube

  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet Tool'
    
  - task: NuGetAuthenticate@1
    displayName: 'NuGet Authenticate'

  # Restore dependencies
  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '$(project)'
    displayName: 'Restore dependencies'

  # Build the project
  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: '$(project)'
      arguments: '--configuration $(buildConfiguration)'
    displayName: 'Build project'
  
  - task: SonarQubeAnalyze@6
    condition: eq(variables['Build.SourceBranchName'], 'develop')
    inputs:
      jdkversion: 'JAVA_HOME_21_X64'

# Publish Quality Gate Result task
  - task: SonarQubePublish@6
    condition: eq(variables['Build.SourceBranchName'], 'develop')
    inputs:
      pollingTimeoutSec: '300'

  # Pack artifact
  - task: DotNetCoreCLI@2
    inputs:
      command: 'pack'
      projects: '$(project)'
      versioningScheme: 'byEnvVar' 
      versionEnvVar: 'buildVersion'
    displayName: 'Pack project with branch $(Build.SourceBranchName) and version $(buildVersion)'
  
  - task: SendGridEmail@2
    inputs:
      SendGridApiKey: '$(SENDGRID_API_KEY)'
      FromAddress: 'sharon088@gmail.com'
      ToAddresses: 'rotem23592@gmail.com'
      Subject: 'PipeLine From Azure'
      emailBodyFormat: 'InLine'
      EmailBody: 'test pipeline'

  - script: |
      echo "Version: $(buildVersion)"
    displayName: 'Print Version to Console'

  # Publish artifact to Azure Artifacts
  - script: |
      nuget.exe push -Source "https://pkgs.dev.azure.com/sharon088/FirstHelloWorld/_packaging/HelloWorldFeed/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
    displayName: 'Push package to Azure Artifacts feed'
  
